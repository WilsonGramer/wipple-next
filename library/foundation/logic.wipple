-- Represents either `True` or `False`.
Boolean : type {
  False
  True
}

-- Make a choice based on whether the input is `True` or `False`.
if :: Boolean {a} {a} -> a
if : condition then else -> when condition {
  True -> do then
  False -> do else
}

-- Represents the logical inverse of a value.
Not : value => trait (value -> value)
instance (Not Boolean) : boolean -> if boolean {False} {True}
instance (Not (a -> b)) where (Not b) (b :: Boolean) : f -> x -> not (f x)

-- Returns `False` if provided `True`, and vice versa. Can also be used on
-- boolean functions and any other value that implements `Not`.
not :: value -> value where (Not value) (value :: Boolean)
not : Not

-- Returns `True` if both sides are `True`.
And : left right (infer output) => trait (left {right} -> output)
instance (And Boolean Boolean Boolean) : a b -> if a b {False}

-- Returns `True` if either side is `True`.
Or : left right (infer output) => trait (left {right} -> output)
instance (Or Boolean Boolean Boolean) : a b -> if a {True} b
instance (Or (Maybe value) value value) : maybe other -> when maybe {
  Some value -> value
  None -> do other
}

-- The result of a comparison between two values.
Ordering : type {
  Is-Less-Than
  Is-Equal-To
  Is-Greater-Than
}

-- Implement this trait to enable comparisons between two values of your type.
Order : value => trait (value value -> Ordering)
-- Cannot put items that are [`value`] into order.
-- You can't use comparison operators like `>` or `<` with [`value`]
-- because it doesn't support ordering.
[default] [error] instance (Order value)
instance (Order Number) : a b -> intrinsic "number-ordering" a b

-- Returns `True` if the left side is less than the right side.
Less-Than : value => trait (value value -> Boolean)
instance (Less-Than value) where (Order value) : a b -> (Order a b) is Is-Less-Than

-- Returns `True` if the left side is less than or equal to the right side.
Less-Than-Or-Equal : value => trait (value value -> Boolean)
instance (Less-Than-Or-Equal value) where (Order value) : a b -> (Order a b) is (Is-Less-Than or Is-Equal-To)

-- Returns `True` if the left side is greater than the right side.
Greater-Than : value => trait (value value -> Boolean)
instance (Greater-Than value) where (Order value) : a b -> (Order a b) is Is-Greater-Than

-- Returns `True` if the left side is greater than or equal to the right side.
Greater-Than-Or-Equal : value => trait (value value -> Boolean)
instance (Greater-Than-Or-Equal value) where (Order value) : a b -> (Order a b) is (Is-Greater-Than or Is-Equal-To)

-- Returns `True` if two values are equal.
Equal : value => trait (value value -> Boolean)
instance (Equal String) : a b -> intrinsic "text-equality" a b
instance (Equal Number) : a b -> intrinsic "number-equality" a b
instance (Equal ()) : () () -> True
instance (Equal Boolean) : a b -> if a {b} {not b}

-- Returns `True` if two values are not equal.
Not-Equal : value => trait (value value -> Boolean)
instance (Not-Equal value) where (Equal value) : a b -> not (Equal a b)

-- Returns the larger of the two inputs.
max :: a -> a -> a where (Order a)
max : a b -> if (a >= b) {a} {b}

-- Returns the smaller of the two inputs.
min :: a -> a -> a where (Order a)
min : a b -> if (a <= b) {a} {b}
