-- A continuous range between two numbers. Each bound may be `nan` to
-- indicate that the range is unbounded in that direction.
Range : (index : Number) => type {
  min :: index
  max :: index
}

@(language : "to")
To : index => trait (index index -> Range index)
(index : Number) => instance (To index) : min max -> {
  min : min
  max : max
}

-- A range between two numbers that counts up in discrete steps.
Stride : (index : Number) => type {
  min :: index
  max :: index
  step :: index
}

@(language : "by")
By : (index : Number) => trait ((Range index) index -> Stride index)
(index : Number) => instance (By index) : {
  min : min
  max : max
} step -> {
  min : min
  max : max
  step : step
}

instance (As-Sequence (Stride Number) Number) : {
  min : min
  max : max
  step : step
} -> when (min /= nan ; max /= nan) {
  (True ; True) -> do {
    current : min
    Sequence {
      if (current < max) {
        n : current
        current! : current + step
        Some n
      } {
        None
      }
    }
  }
  (True ; False) -> do {
    current : min
    Sequence {
      n : current
      current! : current + step
      Some n
    }
  }
  _ -> Sequence {None}
}
