[intrinsic] Number : type
[intrinsic] String : type

Boolean : type {
    True
    False
}

Sequence : element => type {
    next :: {element}
}

Box : value => type {
    value :: value
}

As-Sequence : collection (infer element) => trait (collection -> Sequence element)
instance (As-Sequence (Box value) value) : _

filter :: (item -> Boolean) -> collection -> Sequence item where (As-Sequence collection item)

box : (_ :: Box String)
positive? : (_ :: Number) -> _
(filter positive?) box
